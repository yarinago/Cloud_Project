name: testing

on:
  push:
    branches: [ "*" ]
  pull_request:
    branches: [ "main", "development" ]

permissions:
  contents: read

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    env:
      BASE_URL: ${{ vars.BASE_URL }}
      DB_HOST: ${{ vars.DB_HOST }}
      DB_PORT: ${{ vars.DB_PORT }}
      DB_NAME: ${{ vars.DB_NAME }}
      DB_USERNAME: ${{ vars.DB_USERNAME }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_TIMEOUT: ${{ vars.DB_TIMEOUT }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ vars.AWS_REGION }}
      IMAGE_TAG: ${{ vars.IMAGE_TAG }}

    steps:
      - uses: actions/checkout@v3

      - name: Build & Run Docker Compose container
        run: |
            docker-compose build --build-arg IMAGE_TAG=$IMAGE_TAG
            docker-compose up -d             
      
      - name: Wait until Docker Compose Services are up
        uses: thegabriele97/dockercompose-health-action@main
        with:
          timeout: '30'
          workdir: .
          
      - name: Run Unit Tests
        run: |
            docker ps
            # The unit tests will run on the containers' flask & postgres            
            docker-compose exec -T flask python3 -m unittest discover tests

      - name: Save Docker image as artifact
        run: |
          docker ps
          docker images
          # Save the Docker image as a tar archive
          docker save -o flask_app.tar flask-app:$IMAGE_TAG
          docker save -o postgres_db.tar flask-app-db:$IMAGE_TAG
          docker save -o flask_app_latest.tar flask-app:latest
          docker save -o postgres_db_latest.tar flask-app-db:latest

      - name: Upload Docker image artifacts
        uses: actions/upload-artifact@v2
        with:
          name: flask_and_db_artifacts  # Name of the artifact
          path: |
            flask_app.tar
            postgres_db.tar
            flask_app_latest.tar
            postgres_db_latest.tar
            
      #- name: Run unit tests on the Docker Compose container
      #  run: |
      #      docker ps
            #if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/development'
            #aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
            #docker tag my_flask_app ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPO_NAME }}:${{ env.IMAGE_TAG }}
            #docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPO_NAME }}:${{ env.IMAGE_TAG }}

  #push-to-ecr:
  #  needs: build-and-test
  #  if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/development'
  #  runs-on: ubuntu-latest
  #  env:
  #    AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #    AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #    AWS_REGION: ${{ vars.AWS_REGION }}
  #    IMAGE_TAG: ${{ vars.IMAGE_TAG }}
#
  #  steps:
  #    - name: Configure AWS credentials
  #      uses: aws-actions/configure-aws-credentials@v1
  #      with:
  #        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #        aws-region: eu-central-1
#
  #    - name: Login to AWS ECR
  #      id: login-ecr
  #      run: |
  #        aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
#
  #    - name: Push Docker image to ECR
  #      run: |
  #        docker tag my_flask_app ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPO_NAME }}:${{ env.IMAGE_TAG }}
  #        docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPO_NAME }}:${{ env.IMAGE_TAG }}
  

  #cleanup:
  #  runs-on: ubuntu-latest
  #  needs: build-and-test
  #  steps:
  #    - name: Cleanup Docker Compose containers
  #      run: |
  #        docker-compose down
