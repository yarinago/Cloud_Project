name: Flask-Postgres application

on:
  push:
    branches: [ "*" ]
  pull_request:
    branches: [ "main", "development" ]

permissions:
  contents: read

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    env:
      BASE_URL: ${{ vars.BASE_URL }}
      DB_HOST: ${{ vars.DB_HOST }}
      DB_PORT: ${{ vars.DB_PORT }}
      DB_NAME: ${{ vars.DB_NAME }}
      DB_USERNAME: ${{ vars.DB_USERNAME }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_TIMEOUT: ${{ vars.DB_TIMEOUT }}

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"
      
      - name: Run unit tests on the Docker Compose container
        run: |
            docker-compose up --build -d
            docker ps
            CONTAINER_ID=$(docker ps -q --filter "name=flask-app-db")
            until docker exec -T postgres pg_isready -h db -U user -q; do
              echo "Waiting for PostgreSQL to be ready..."
              docker logs "$CONTAINER_ID" --tail 50
              sleep 5
            done
            # The unit tests will run on the container's flask & postgres
            #docker-compose exec -T flask python3 -m unittest discover tests


  #push-to-ecr:
  #  needs: build-and-test
  #  if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/development'
  #  runs-on: ubuntu-latest
#
  #  steps:
  #    - name: Install AWS CLI
  #      uses: aws-actions/configure-aws-credentials@v1
#
  #    - name: Login to AWS ECR
  #      id: login-ecr
  #      run: |
  #        aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
#
  #    - name: Push Docker image to ECR
  #      run: |
  #        docker tag my_flask_app ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPO_NAME }}:${{ env.IMAGE_TAG }}
  #        docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPO_NAME }}:${{ env.IMAGE_TAG }}
  

  #cleanup:
  #  runs-on: ubuntu-latest
  #  needs: build-and-test
  #  steps:
  #    - name: Cleanup Docker Compose containers
  #      run: |
  #        docker-compose down
